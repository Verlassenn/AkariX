////#IF (EVAL ( arguments[ "-s" ] || arguments[ "-strip" ] ))
/* AkariX - {{AkariTemplate : Version}}
 * Copyright (C) {{AkariTemplate : Year}} {{AkariTemplate : Rightholder}}
 * This copy is minimized: access source from the github repo below.
 * <https://github.com/akaza-akari/AkariX>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 */
////#ELSE
/* AkariX - {{AkariTemplate : Version}}
 * Copyright (C) {{AkariTemplate : Year}} {{AkariTemplate : Rightholder}}
 * <https://github.com/akaza-akari/AkariX>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 */
////#ENDIF

if ( Global._get( "__axExport" ) ) {
  (Global._get( "__axExport" )).Compositor.dispose();
}

(function() {

var axInit = function(){

var AkariX = {};

{{AkariTemplate : Namespaces}}

Global._set( "__axExport", AkariX );

};

load("libBitmap",axInit);

})();

var global = this;

// Fight async load()
var axWait = function ( callback ) {
  var handle = 0;
  var checkFunc = function () {
    var aX = Global._get( "__axExport" );
    if ( aX ) {
      ScriptManager.clearTimer();
      callback( aX );
    }
  };

  handle = interval( checkFunc, 20, 0 );
};

axWait( function( AkariX ) {
  AkariX.extend( global, AkariX );

  Compositor.initialize({
    nodes : [
      { type : "DebugOutput", input : {}, links : { "signal" : { target : 5, targetOutput : "output" } } },
      {
        type : "Renderer",
        input : {},
        links : {
          "content" : { target : 2, targetOutput : "value" },
          "width" : { target : 4, targetOutput : "width" },
          "height" : { target : 4, targetOutput : "height" }
        } 
      },
      {
        type : "Concat",
        input : {},
        links : { "value" : { target : 3, targetOutput : "value" } }
      },
      {
        type : "Keyframes",
        input : {
          "keyframes" : [
            [
              [ 0,
                {
                  type : "Spline",
                  vertices : [ [ [ 0, 0 ], [ 100, 50 ], [ 0, 100 ] ], [ [ 0, 100 ], [ 0, 0 ] ] ],
                  fill : {
                    type : "flat",
                    colors : [ [ "rgb", 1, 0, 0, 1 ] ]
                  },
                  stroke : {
                    type : "none"
                  },
                  transform : {
                    scale : [ 1, 1 ,1 ]
                  }
                }
              ],
              [ 10000, 
                {
                  type : "Spline",
                  vertices : [
                    [ [ 0, 0 ], [ 50, 0 ], [ 100, 50 ] ],
                    [ [ 100, 50 ], [ 50, 100 ], [ 0, 100 ] ],
                    [ [ 0, 100 ], [ 0, 0 ] ]
                  ],
                  fill : {
                    type : "flat",
                    colors : [ [ "rgb", 1, 0, 0, 1 ], [ "rgb", 1, 1, 1, 0 ], [ "rgb", 0, 0, 0, 0 ] ],
                    ratios : [ 0, 0.5, 1 ]
                  },
                  stroke : {
                    type : "none"
                  },
                  transform : {
                    scale : [ 2, 2 ,1 ]
                  }
                }
              ]
            ]
          ],
          "as" : "Primitive",
          "cacheSpline" : true
        },
        links : { "time" : { target : 4, targetOutput : "time" } }
      },
      { type : "Presentation", input : {}, links : {} },
      { type : "BoxBlur", input : { radiusX : 5, radiusY : 0 }, links : { "signal" : { target : 1, targetOutput : "output" } } }
    ],
    links : [],
    entryPoint : 0
  });

});