// Spline related classes

var Bezier = function() {
  var subdivOne = function( cp, leftSegment, rightSegment, interpolation ) {
    var poly = [];

    for ( var d = 0; d < cp.length; d ++ ) {
      leftSegment[ d ] = [ cp[ d ][ 0 ] ];
      rightSegment[ d ] = [];
      poly.push( cp[ d ] );
    }

    do {
      var poly2 = [];

      for ( var d = 0; d < cp.length; d ++ ) {
        poly2.push([]);

        if ( interpolation[ d + 0 ] ){
          for ( var i = 0; i < poly[ d ].length - 1; i ++ ) {
            poly2[ d ].push( ( interpolation[ d + 0 ] )( poly[ d ][ i ], poly[ d ][ i + 1 ], 0.5 ) );
          }
        }
        else {
          for ( var i = 0; i < poly[ d ].length - 1; i ++ ) {
            poly2[ d ].push( ( poly[ d ][ i ] + poly[ d ][ i + 1 ] ) / 2 );
          }
        }

        leftSegment[ d ].push( poly2[ d ][ 0 ] );
        rightSegment[ d ].push( poly2[ d ][ poly2[ d ].length - 1 ] );
      }

      poly = poly2;
    } while ( poly[ 0 ].length > 1 );

    for ( var d = cp.length - 1; d >= 0; d -- ) {
      rightSegment[ d ].unshift( cp[ d ][ cp[ d ].length - 1 ] );
      rightSegment[ d ].reverse();
    }
  };

  var split = function( lPs, rPs ) {
    var lS = [];
    var rS = [];
    subdivOne( this.cp, lS, rS, this.interpolation );

    var i = 0;
    var d = 0;
    for ( i = 0; i < lS[ 0 ].length; i ++ ) {
      lPs.push([]);
      for ( d = 0; d < this.dimension; d ++ ) {
        lPs[ i + 0 ].push( lS[ d + 0 ][ i + 0 ] );
      }
    }
    for ( i = 0; i < rS[ 0 ].length; i ++ ) {
      rPs.push([]);
      for ( d = 0; d < this.dimension; d ++ ) {
        rPs[ i + 0 ].push( rS[ d + 0 ][ i + 0 ] );
      }
    }
  };

  var subdiv = function( precision, cp, removeRight, interpolation, distance, projected ) {
    // check if precision requirements are fulfilled
    var sumDelta = 0;
    var start = 0;
    var step = 0;
    var end = 0;
    var subdivStop = true;

    if ( projected ) {
      var d1 = cp[ 0 ];
      var d2 = cp[ 1 ];
      var d3 = cp[ 2 ];
      var l = d1.length;
      var l2 = l - 1;
      if ( l > 2 ) {
        sumDelta = 0;
        var start1 = d1[ 0 ] / d3[ 0 ];
        var start2 = d2[ 0 ] / d3[ 0 ];
        var len1 = d1[ l2 ] / d3[ l2 ] - start1;
        var len2 = d2[ l2 ] / d3[ l2 ] - start2;
        var len3 = Math.abs( len1 ) < Math.abs( len2 ) ? len1 : len2;
        for ( var i = l - 2; i >= 1; i -- ) {
          sumDelta += Math.abs(
            len3 * (
              ( d1[ i ] / d3[ i ] - start1 ) / len1 -
              ( d2[ i ] / d3[ i ] - start2 ) / len2
            )
          );
        }
        sumDelta = sumDelta / ( l - 2 );

        if ( sumDelta > precision[ 0 ] ) {
          subdivStop = false;
        }
        if ( sumDelta > precision[ 1 ] ) {
          subdivStop = false;
        }
      }
      else {
        subdivStop = true;
      }
    }
    else {
      for ( var d = cp.length - 1; d >= 0; d -- ) {
        sumDelta = 0;
        start = cp[ d ][ 0 ];
        end = cp[ d ][ cp[ d ].length - 1 ];

        if ( interpolation[ d + 0 ] && distance[ d + 0 ] ) {
          for ( var i = cp[ d ].length - 2; i >= 1; i -- ) {
            sumDelta += ( distance[ d + 0 ] )( cp[ d ][ i ], ( interpolation[ d + 0 ] )( start, end, i / ( cp[ d ].length - 1 ) ) );
          }
        }
        else {
          step = ( end - start ) / ( cp[ d ].length - 1 );
          for ( var i = cp[ d ].length - 2; i >= 1; i -- ) {
            sumDelta += Math.abs( cp[ d ][ i ] - start - step * i );
          }
        }

        sumDelta = cp[ d ].length > 2 ? ( sumDelta / ( cp[ d ].length - 2 ) ) : 0;

        if ( sumDelta > precision[ d ] ) {
          subdivStop = false;
          break;
        }
      }
    }

    if ( subdivStop ) {
      // return null indicating end of subdivision, treat as line
      return null;
    }
    else {
      // subdivide and create polyline
      var leftSegment = [];
      var rightSegment = [];
      subdivOne( cp, leftSegment, rightSegment, interpolation );

      // compose resulting polyline from recursive calls
      var leftPoly = subdiv( precision, leftSegment, true, interpolation, distance, projected );
      var rightPoly = subdiv( precision, rightSegment, removeRight, interpolation, distance, projected );

      if ( ! leftPoly ) {
        leftPoly = [ [] ];
        for ( var d = 0; d < cp.length; d ++ ) {
          leftPoly[ 0 ].push( cp[ d ][ 0 ] );
        }
      }

      if ( rightPoly ) {
        var retPoly = leftPoly.concat( rightPoly );
        return retPoly;
      }
      else {
        var tmp = [];

        for ( var d = 0; d < cp.length; d ++ ) {
          tmp.push( rightSegment[ d ][ 0 ] );
        }
        leftPoly.push( tmp );

        if ( ! removeRight ) {
          tmp = [];

          for ( var d = 0; d < cp.length; d ++ ) {
            tmp.push( rightSegment[ d ][ rightSegment[ d ].length - 1 ] );
          }
          leftPoly.push( tmp );
        }

        return leftPoly;
      }
    }
  };

  var toPolyline = function( precision ) {
    if ( ! precision ) {
      // Derive precision for each dimension from coordinate range, assure 1/100 precision
      var max = 0;
      var min = (0).constructor.MAX_VALUE;

      precision = [];
      for ( var d = 0; d < this.cp.length; d ++ ) {
        if ( !this.interpolation[ d + 0 ] ) {
          max = 0;
          min = (0).constructor.MAX_VALUE;
          for ( var i = this.cp[ d ].length - 1; i >= 0; i-- ) {
            if ( this.cp[ d ][ i ] > max ) {
              max = this.cp[ d ][ i ];
            }
            else if ( this.cp[ d ][ i ] < min ) {
              min = this.cp[ d ][ i ];
            }
          }
          precision.push( ( max - min ) / 100 );
        }
        else {
          precision.push( 1 );
        }
      }
    }
    else if ( typeof precision === "number" ) {
      var np = [];
      for ( var d = 0; d < this.cp.length; d ++ ) {
        np.push( precision );
      }

      precision = np;
    }

    return subdiv( precision, this.cp, false, this.interpolation, this.distance, this.projected ) || [ this.points[ 0 ], this.points[ this.points.length - 1 ] ];
  };

  return function( points ) {
    // extract cp array for subdivision, evaluation and stuff
    var cp = [];

    for ( var d = 0; d < points[ 0 ].length; d ++ ) {
      cp.push([]);
      for ( var i = 0; i < points.length; i ++ ) {
        cp[ d ].push( points[ i ][ d ] );
      }
    }

    return {
      points : points,
      cp : cp,
      // When set to true, during error approximation, performs division by dimension 3 and limits to dimension 2.
      projected : false,
      split : split,
      // Set a interpolation and distance function for each dimension. If not provided arthemics are used
      interpolation : [],
      distance : [],
      dimension : points[ 0 ].length,
      toPolyline : toPolyline
    };
  };
}();